// 工具对象，提供一系列辅助方法
var tctipUtil = {
	// 创建元素并设置属性
	createElement: function (i, e, j) {
		var a = document.createElement(e || "div");
		for (var h in i) {
			"style" == h ? a[h].cssText = i[h] : a[h] = i[h]
		}
		return (j || document.body).appendChild(a)
	},
	// 创建包含HTML的元素
	createElementHtml: function (i, e, j) {
		// 与createElement类似，但是这里似乎并没有用到i参数的html属性
		var a = document.createElement(e || "div");
		for (var h in i) {
			"style" == h ? a[h].cssText = i[h] : a[h] = i[h]
		}
		return (j || document.body).appendChild(a)
	},
	// 获取类名匹配的元素
	getElementsByClassName: function (d, c) {
		return c = c || document,
			c.getElementsByClassName ? c.getElementsByClassName(d) : function (o, e) {
				var p, q, i = [],
					a = e.getElementsByTagName("*"),
					n = a.length,
					b = new RegExp("(^|\\s)" + o + "(\\s|$)");
				for (p = 0, q = 0; p < n; p++) {
					b.test(a[p].className) && (i[q] = a[p], q++)
				}
				return i
			}(d, c)
	},
	// 获取元素的文本内容属性名
	getTextKey: function () {
		return "firefox" == tctipUtil.getExplorer() ? "textContent" : "innerText"
	},
	// 获取当前浏览器类型
	getExplorer: function () {
		var b = window.navigator.userAgent.toLowerCase();
		return b.indexOf("msie") >= 0 ? "ie" : b.indexOf("firefox") >= 0 ? "firefox" : b.indexOf("chrome") >= 0 ? "chrome" : b.indexOf("opera") >= 0 ? "opera" : b.indexOf("safari") >= 0 ? "safari" : void 0
	},
	// 添加事件监听器到window.onload
	addLoadEvent: function (d) {
		if ("function" != typeof window.onload) {
			window.onload = d
		} else {
			var c = window.onload;
			window.onload = function () {
				c(),
					d()
			}
		}
	},
	// 检测浏览器是否支持Canvas
	isSupportCanvas: function () {
		try {
			return document.createElement("canvas").getContext("2d"),
				!0
		} catch (b) {
			return !1
		}
	},
	// 检测鼠标是离开还是进入元素
	isMouseLeaveOrEnter: function (d, f) {
		if (!d) {
			return !1
		}
		if ("mouseout" != d.type && "mouseover" != d.type && "click" != d.type) {
			return !1
		}
		for (var e = d.relatedTarget ? d.relatedTarget : "mouseout" == d.type ? d.toElement : d.fromElement; e && e != f;) {
			e = e.parentNode
		}
		return e != f
	},
	// 获取当前事件对象
	currentEvent: function () {
		if (document.all) {
			return window.event
		}
		for (func = tctipUtil.currentEvent.caller; null != func;) {
			var b = func.arguments[0];
			if (b && (b.constructor == Event || b.constructor == MouseEvent || "object" == typeof b && b.preventDefault && b.stopPropagation)) {
				return b
			}
			func = func.caller
		}
		return null
	},
	// 合并数组
	mergeArray: function (g, e, h) {
		for (var a in e) {
			(g.hasOwnProperty(a) || h) && (g[a] = e[a])
		}
		return g
	},
	// 动画效果，改变元素的样式
	animate: function (g, e, h) {
		for (var a in g) {
			e.style[a] = g[a]
		}
	}
},
	// tctip对象，用于创建和初始化打赏面板
	tctip = window.tctip || {
		myConfig: {
			headText: "喜欢请打赏",
			siderText: "公告 ● 支持",
			siderTextTop: "-84px",
			siderBgcolor: "#323d45",
			siderTop: "10%",
			buttomText: "储物间地址发布页",
			buttomLink: "http://axutongxue.ysepan.com/"
		},
		// 打赏相关元素
		myRewards: null,
		myRewardsBtn: null,
		myRewardsMain: null,
		myRewardsbox: null,
		myRewardsList: null,
		myRewardsDetail: null,
		myRewardsListUl: null,
		myRewardsUbox: null,
		currentLi: null,
		currentData: null,
		// 生成打赏面板配置
		generateMyConfig: function () {
			tctip.myConfig = tctipUtil.mergeArray(tctip.myConfig, tctipConfig);
			var i = [],
				e = 0,
				j = !1;
			for (var a in tctipConfig.list) {
				var h = tctipConfig.list[a];
				if ("myR-on" == h.className && (j = !0), i.push(h), e += 1, e >= 5) {
					break
				}
			}
			0 == j && (i[0].className = "myR-on"),
				tctip.myConfig.list = i
		},
		// 创建打赏面板
		generateMyRewards: function () {
			this.myRewards = tctipUtil.createElement({
				id: "myRewards",
				className: "myRewards",
				style: "top:" + this.myConfig.siderTop + ";"
			}),
				this.generateLeftBtn(),
				this.generateMyRewardsMain()
		},
		// 创建左侧按钮
		generateLeftBtn: function () {
			var b = {
				className: "btn-myRewards"
			};
			b.style = "margin-top:" + tctip.myConfig.siderTextTop + ";";
			if (isMobileDevice() || isPc()) {
				// m
				b.onclick = function () {
					tctip.showTctip(this)
				}
			} else {
				// p
				b.onmouseover = function () {
					tctip.showTctip(this)
				}
			}


			this.myRewardsBtn = tctipUtil.createElement(b, "a", this.myRewards);
			b = {
				className: "sider-text"
			};
			b.style = "background-color:" + tctip.myConfig.siderBgcolor,
				b[tctipUtil.getTextKey()] = tctip.myConfig.siderText,
				tctipUtil.createElement(b, "p", this.myRewardsBtn)
		},
		// 显示打赏面板
		showTctip: function (d) {
			var c = tctipUtil.currentEvent();
			tctipUtil.isMouseLeaveOrEnter(c, d) && (tctipUtil.animate({
				width: "240px"
			},
				tctip.myRewards, 200), tctipUtil.animate({
					display: "none"
				},
					tctip.myRewardsBtn, 200))
		},
		// 隐藏打赏面板
		hideTctip: function (d) {
			var c = tctipUtil.currentEvent();
			tctipUtil.isMouseLeaveOrEnter(c, d) && (tctipUtil.animate({
				width: "0px"
			},
				tctip.myRewards, 200), tctipUtil.animate({
					display: "block"
				},
					tctip.myRewardsBtn, 200))
		},
		// 创建打赏面板主要内容
		generateMyRewardsMain: function () {
			this.myRewardsMain = tctipUtil.createElement({
				className: "myRewards-main",
				onmouseout: function () {
					tctip.hideTctip(this)
				}
			},
				"div", this.myRewards);
			var d = this.myRewardsMain,
				f = {
					className: "sider-close",
					title: "收起",
					onclick: function () {
						tctip.hideTctip(d)
					}
				};
			f[tctipUtil.getTextKey()] = ">>",
				tctipUtil.createElement(f, "a", this.myRewardsMain);
			f = {
				className: "myR-h"
			};
			f[tctipUtil.getTextKey()] = tctip.myConfig.headText,
				tctipUtil.createElement(f, "h1", this.myRewardsMain),
				this.generateMyRewardsbox();
			var e = tctipUtil.createElement({
				className: "myR-bot"
			},
				"p", this.myRewardsMain);
			f = {
				href: tctip.myConfig.buttomLink || "http://axutongxue.ysepan.com/",
				target: "_blank"
			},
				f[tctipUtil.getTextKey()] = tctip.myConfig.buttomText || "储物间地址发布页",
				tctipUtil.createElement(f, "a", e)
		},
		// 创建打赏面板的盒子
		generateMyRewardsbox: function () {
			this.myRewardsbox = tctipUtil.createElement({
				className: "myRewardsbox"
			},
				"div", this.myRewardsMain),
				this.generateMyRewardsList(),
				this.generateMyRewardsDetail()
		},
		// 创建打赏列表
		generateMyRewardsList: function () {
			//使用tctipUtil工具对象的createElement方法创建一个div元素，并给它添加一个类名myRewards-list
			this.myRewardsList = tctipUtil.createElement({
				className: "myRewards-list"
			},
				//这个div元素被添加到myRewardsbox元素中，myRewardsbox是打赏面板的一个容器
				"div", this.myRewardsbox),
				//检查myConfig.list数组的长度是否大于或等于5。如果是，则创建一个没有类名的ul元素
				tctip.myConfig.list.length >= 5 ? this.myRewardsListUl = tctipUtil.createElement({},
					"ul", this.myRewardsList) : this.myRewardsListUl = tctipUtil.createElement({
						//如果不是，则创建一个带有类名not-full的ul元素。这个ul元素被添加到之前创建的myRewardsList元素中
						className: "not-full"
					},
						"ul", this.myRewardsList);
			//开始一个循环，循环次数为5，或者直到myConfig.list数组中没有更多的元素。在每次循环中，它都会处理myConfig.list数组中的一个元素
			for (var g = 0; g < 5 && tctip.myConfig.list.hasOwnProperty(g); g++) {
				//获取当前循环中的元素
				var e = tctip.myConfig.list[g],
					//创建一个li元素，并将其类名设置为当前元素的类名。这个li元素被添加到之前创建的myRewardsListUl元素中。
					h = tctipUtil.createElement({
						className: e.className
					},
						"li", this.myRewardsListUl),
					//一个立即执行的函数表达式，用于创建一个a元素，并为其设置onmouseover事件监听器。当鼠标悬停在该元素上时，会调用tctip.leftMouseover方法
					a = null; (function () {
						var b = e,
							c = {
								onmouseover: function () {
									tctip.leftMouseover(this, b)
								}
							};
						//设置a元素的文本内容为当前元素的名称
						c[tctipUtil.getTextKey()] = e.name,
							//如果当前是第五个元素，则给a元素添加一个额外的类名fifth
							4 == g && (c.className = "fifth"),
							// 创建一个a元素，并将其添加到之前创建的h元素中
							a = tctipUtil.createElement(c, "a", h)
					})(),
						"myR-on" == e.className && (this.currentLi = h, this.currentData = e),
						//创建一个img元素
						tctipUtil.createElement({
							className: "png", //设置其类名为png
							src: e.icon,	//src属性为当前元素的图标URL
							alt: e.name, 	//alt属性为当前元素的名称
						},
							"img", a) //并将这个img元素添加到之前创建的a元素中
			}
		},
		// 创建打赏详情
		generateMyRewardsDetail: function () {
			tctip.myRewardsDetail && tctip.myRewardsbox.removeChild(tctip.myRewardsDetail),
				this.myRewardsDetail = tctipUtil.createElement({
					className: "myRewards-detail"
				},
					"div", this.myRewardsbox),
				this.myRewardsUbox = tctipUtil.createElement({
					className: "myRewards-ubox"
				},
					"div", this.myRewardsDetail);
			var d = {
				className: "myRewards-code-tit"
			};
			if (tctip.currentData.hasOwnProperty("text")) {
				var c = tctipUtil.createElement({
					className: "myRewards-notice"
				},
					"div", this.myRewardsUbox);
				d = {
					className: "myRewards-text"
				},
					d.innerHTML = tctip.currentData.text || tctip.currentData.desc || tctip.currentData.name;
				tctipUtil.createElement(d, "p", c)
			} else {
				d[tctipUtil.getTextKey()] = "点击或扫描二维码查看",
					tctipUtil.createElement(d, "p", this.myRewardsUbox);
				c = tctipUtil.createElement({
					className: "myRewards-code",
					onclick: function () {
						window.open(tctip.currentData.href, '_blank');
					}
				},
					"div", this.myRewardsUbox);
				if (tctip.currentData.hasOwnProperty("qrimg")) {
					tctipUtil.createElement({
						src: tctip.currentData.qrimg
					},
						"img", c),
						d = {
							className: "myRewards-account"
						},
						d[tctipUtil.getTextKey()] = tctip.currentData.desc || tctip.currentData.name;
					tctipUtil.createElement(d, "p", this.myRewardsUbox)
				}
			}
		},
		// 处理列表项的鼠标悬停事件
		leftMouseover: function (d, c) {
			tctip.currentLi.className = "",
				d.parentNode.className = "myR-on",
				tctip.currentLi = d.parentNode,
				tctip.currentData = c,
				tctip.generateMyRewardsDetail()
		},
		// 初始化打赏面板
		init: function () {
			document.body ? (tctip.generateMyConfig(), tctip.generateMyRewards()) : setTimeout(tctip.init, 0)
			const list = [{
				href: ''
			}, {
				href:'https://www.zhihu.com/consult/people/1262168587433316352'
			},{
				href:'https://t.zsxq.com/19d2gGtRe'
			},{
				href:'http://axu.xpsup.cn/index.html'
			},{
				href:'https://axu.simhaoka.com/phone/index?id=B956B2050EAA74084CC3FE6EF37C57CF'
			}]
			tctip.myConfig.list.map((item, index) => {
				if (item.qrimg) {
					item.href = list[index].href
				}
			})
		}
	};

function isPc() {
	var ua = window.navigator.userAgent
	var IsIPad = false
	if (/ipad/i.test(ua)) {
		IsIPad = true
	}
	var macApp = ua.match(/Macintosh/i) != null
	if (macApp) {
		var canvas = document.createElement('canvas')
		if (canvas != null) {
			var context =
				canvas.getContext('webgl') || canvas.getContext('experimental-webgl')
			if (context) {
				var info = context.getExtension('WEBGL_debug_renderer_info')
				if (info) {
					var renderer = context.getParameter(info.UNMASKED_RENDERER_WEBGL)
					if (renderer.indexOf('Apple') != -1) IsIPad = true
				}
			}
		}
	}
	return IsIPad;
}

function isMobileDevice() {
	return navigator.userAgent.match(
		/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile|WPDesktop/i
	);
}

tctip.init();
